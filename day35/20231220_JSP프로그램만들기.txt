0) 요구사항 확인
- 프로그램에 어떤 기능이 필요한지 명세를 작성한다
- 각 기능의 상세 구현이 어떻게 이루어져야 하는지 조건을 표, 다이어그램 등으로 작성한다
- 기능별 지켜야 하는 조건에 어떤 항목이 있는지 세부내용을 작성한다
- UI 프로토타이핑을 이용하여 대략적인 화면 구성이 어떻게 진행될지 작성한다
- 클라이언트의 요구사항과 UI/UX, 웹 표준 등을 반영하여 레이아웃 및 화면을 구성한다
- 전체목록/검색목록/단일조회/작성/수정/삭제

1) 데이터 모델링
- 프로그램에서 사용할 데이터의 형식을 정의해야 한다
- DB에서 데이터 형식을 정의하는 것은 테이블 생성 (create)
- 자바에서 데이터 형식을 정의하는 것은 클래스 (DTO, JavaBeans)
- 모든 기능을 원활하게 테스트할 수 있도록 간단한 더미데이터를 추가해둔다

2) 프로그램 상세 기능 구현
- 화면을 먼저 구현한 이후 기능을 구현할 수도 있으나, 데이터와 기능이 결정되었다면 기능 구현이 가능하다
- DAO(Data Access Object)를 작성한다
- Connection, Statement, ResultSet, DriverManager
- DAO처럼 기능 중심의 객체를 생성할 경우에는, 보통 Singleton 패턴을 적용한다
- select, insert, update, delete 구문을 사용할 수 있어야 한다
- where 절의 사용방법을 이해하고 있어야 한다
- PK(or Unique)의 특성을 이해하고, 적용하는가에 따라 전체조회/단일조회/검색목록 으로 구분할 수 있다
- insert, update, delete는 불러오기가 아니므로, 명령어에 영향을 받은 줄 수를 반환한다
- 이를 구분해서 정리하면 아래와 같다

--------------------------------------------------------------
		select			insert/update/delete
--------------------------------------------------------------
		전체목록			추가
기능		단일조회			수정
		검색목록			삭제

함수		executeQuery()		executeUpdate()
반환형		ResultSet		int
수행후DB변화	없음			명령 성공 시 있음
--------------------------------------------------------------


3) 만들어진 기능을 각 화면(웹 페이지)과 연결한다
list.jsp		전체 목록
search.jsp		검색 목록
view.jsp		단일 조회
add.jsp			추가
add-action.jsp		
modify.jsp		수정
modify-action.jsp
delete.jsp		삭제

각 페이지가 가지는 공통 화면 요소 및 자바 객체를 header.jsp 형태로 묶어서 include로 활용할 수 있도록 준비
메뉴 네비게이터가 항상 최상위 페이지/상위 페이지 로 이동이 가능하도록 구성한다
parameter 및 attribute를 효율적으로 활용하기 위해 EL/JSTL 기능을 사용할 수 있어야 한다

- 모든 기능이 구현되었다면, 테스트를 통해 예외 처리를 추가하거나, 코드를 수정하여 완성한다








